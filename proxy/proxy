#!/usr/bin/env python3.10

import sys
import threading
import re
import time
import argparse
import xml.etree.ElementTree
from socket import *
BUFFER_SIZE = 4096




# parse the filetype of a client request
def parse_filetype(request):
    params = request.split("\r\n")
    url_line = params[0]
    if ".mpd" in url_line:
        return "mpd"
    elif ".m4s" in url_line:
        return "chunk"
    else:
        return "other"


# parse available bitrates from mpd
def parse_bitrates(response):
    bitrate_strings = re.findall('bandwidth="[0-9]+"', response)
    bitrates = []
    for string in bitrate_strings:
        bitrate = int(re.findall('[0-9]+', string)[0])
        bitrates.append(bitrate)
    return bitrates


# parse content length of a server response
def parse_length(response):
    for i in range(len(response)):
        if response[i:i+4].decode() == ("\r\n\r\n"):
            header = response[:i+4].decode()
            break
    length_line = re.findall('Content-Length: [0-9]+', header)[0]
    length = int(re.findall('[0-9]+', length_line)[0])
    return length, len(header)


# set bitrate to the best in a .m4s request
def request_best_bitrate(request, best_bitrate):
    abs_request = re.sub('bunny_[0-9]+', 'bunny_' + str(best_bitrate), request)
    chunkname = re.findall('\/bunny_[0-9]+bps\/BigBuckBunny_6s[0-9]+.m4s', abs_request)[0]
    return abs_request, chunkname


# return the updated current throughput using EWMA
def calculate_EWMA_tp(tp_cur, tp_new, alpha):
    tp_cur = alpha * tp_new + (1 - alpha) * tp_cur
    return tp_cur


# return the current highest possible bitrate
def select_best_bitrate(tp_cur, bitrates):
    max_bitrate = tp_cur / 1.5
    best_bitrate = bitrates[0]

    for i in range(1, len(bitrates)):
        if bitrates[i] <= max_bitrate:
            best_bitrate = bitrates[i]
        else:
            break

    return best_bitrate




# for each thread
def handle_thread(sock_client, addr):

    # dict client_tp and file log are global variables
    global client_tp
    global log
    global alpha
    ip = addr[0]
    
    # a client is connected
    print("* Connected to Client " + str(addr))

    # creat a socket to forward to server
    sock_server = socket(AF_INET, SOCK_STREAM)
    sock_server.bind((fake_ip, 0))
    sock_server.connect((server_ip, 8080))

    print("* Connected to Server " + "(" + str(server_ip) + " , 8080)")
    print("* Proxy is ready to serve")
    print("------------------------------------------------------------")

    
    while True:

        # receive request from client
        try:
            request = sock_client.recv(BUFFER_SIZE)
            if len(request) == 0:
                print ("! Client is down")
                break
        except ConnectionError:
            print("! Client is down")
            break

        
        # get filetype
        filetype = parse_filetype(request.decode())
        

        # handle mpd requests
        if filetype == 'mpd':

            # request mpd from server
            sock_server.send(request)
            try:
                response = sock_server.recv(BUFFER_SIZE)
                if len(response) == 0:
                    print("! Server is down")
                    break
            except ConnectionError:
                print("! Server is down")
                break

            # get available bitrates
            bitrates = parse_bitrates(response.decode())
            if client_tp[ip][1] != bitrates:
                client_tp[ip][1] = bitrates
                print("+ Update available Bitrates " + str(client_tp[ip][1]))

            # initialize best bitrate if not stored
            if client_tp[ip][2] not in client_tp[ip][1]:
                client_tp[ip][2] = client_tp[ip][1][0]
                print("+ Update Best Bitrate to be " + str(client_tp[ip][2]))
            
            # initializ tp if not stored
            if client_tp[ip][0] == 0:
                client_tp[ip][0] = client_tp[ip][1][0] * 1.5
                print("+ Update EWMA tp to be " + str(client_tp[ip][0]))

            # modify request
            non_list_request = request.decode().replace('BigBuckBunny_6s.mpd', 'BigBuckBunny_6s_nolist.mpd').encode()
            
            # request no_lsit mpd from server and send back to client
            sock_server.send(non_list_request)
            try:
                response = sock_server.recv(BUFFER_SIZE)
                if len(response) == 0:
                    print("! Server is down")
                    break
            except ConnectionError:
                print("! Server is down")
                break
            sock_client.send(response)

            print("Send back BigBuckBunny_6s_nolist.mpd to Client " + str(addr))


        # handle m4s requests
        elif filetype == 'chunk':

            # start timer
            t_start = time.time()

            # modify request
            abr_request, chunkname = request_best_bitrate(request.decode(), client_tp[ip][2])
            abr_request = abr_request.encode()

            # request m4s from server
            sock_server.send(abr_request)
            try:
                response = sock_server.recv(BUFFER_SIZE)
                if len(response) == 0:
                    print("! Server is down")
                    break
            except ConnectionError:
                print("! Server is down")
                break
            
            # get payload length and header length
            length, header_length = parse_length(response)
            print("Length of " + chunkname + " is " + str(length))

            # handle buffer overflow
            while len(response) < length + header_length:
                response = response + sock_server.recv(BUFFER_SIZE)
            
            # end timer
            t_final = time.time()
            print("Length of the response is " + str(len(response)))

            # send back to server
            sock_client.send(response)
            print("Send back " + chunkname + " to Client " + str(addr))

            # calculate new tp
            durtaion = t_final - t_start
            print("Duration of " + chunkname + " is " + str(durtaion))
            tp_new = (8 * length) / durtaion

            # update EWMA tp
            client_tp[ip][0] = calculate_EWMA_tp(client_tp[ip][0], tp_new, alpha)
            print("EWMA Throughput is updated to be " + str(client_tp[ip][0]))

            # write to log
            log.write('%f %f %f %f %d %s %s\n' % (t_final, durtaion, tp_new/1000, client_tp[ip][0]/1000, round(client_tp[ip][2]/1000), server_ip, chunkname))
            log.flush()

            # update best bitrateS
            client_tp[ip][2] = select_best_bitrate(client_tp[ip][0], client_tp[ip][1])
            print("Best Bitrate is set to be " + str(client_tp[ip][2]))
            print("------------------------------------------------------------")


        # handle html, js, or other requests
        else:

            # request from server and send back to client
            sock_server.send(request)
            try:
                response = sock_server.recv(BUFFER_SIZE)
                if len(response) == 0:
                    print("! Server is down")
                    break
            except ConnectionError:
                print("! Server is down")
                break
            sock_client.send(response)

            print("Send back a file to Client " + str(addr))


    # close connection to both current client and socket
    sock_client.close()
    sock_server.close()
    print("! Connections to the current client and server are both closed")
    print("* Proxy is ready to handle the next client")




if __name__ == '__main__':
    # dict to record a clients' network info
    client_tp = {}

    log_path = sys.argv[1]
    alpha = float(sys.argv[2])
    listen_port = int(sys.argv[3])
    fake_ip = sys.argv[4]
    server_ip = sys.argv[5]
    print("Alpah is set to be " + str(alpha))

    # file to record loggin information
    log = open(log_path,'w')

    # creat a welcome socket to listen for client
    sock_welcome = socket(AF_INET, SOCK_STREAM)
    sock_welcome.bind(("", listen_port))

    # listen for multiple clients
    sock_welcome.listen(10000)

    print("* Proxy is ready for Clients")


    while True:

        # create the connection socket to the client
        sock_client, addr = sock_welcome.accept()

        # remember the EWMA, available bitrates, and best bitrate for a client IP
        if addr[0] not in client_tp.keys():
            init_tp = 0
            init_bitrates = []
            init_best_bitrate = 0
            client_tp[addr[0]] = [init_tp, init_bitrates, init_best_bitrate]
        else:
            print("+ Client " + addr[0] + " has connected before")
            print("+ Client Info is " + str(client_tp[addr[0]]))

        # start a new threadS for this new client
        thread = threading.Thread(target=handle_thread, args=(sock_client, addr))
        thread.start()

        # print number of active connections
        print(f"* Active Connections: {threading.active_count() - 1}")

